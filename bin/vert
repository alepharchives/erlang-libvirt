#!/usr/bin/env escript
%%! -smp enable

%%%
%%% Command line interface to libvirt
%%%
-include_lib("kernel/include/file.hrl").

main(Opt) ->
    % load vert
    true = code:add_pathz(filename:dirname(escript:script_name())
        ++ "/../ebin"),

    % load srly for tcsetattr (optional)
    code:add_pathz(filename:dirname(escript:script_name())
        ++ "/../deps/srly/ebin"),

    call(Opt).

call(["autostart", Name | Arg]) ->
    Opt = getopt(Arg),

    Autostart = case proplists:get_value("disable", Opt) of
        undefined -> 1;
        _ -> 0
    end,

    {ok, Connect} = connect(Opt),
    {ok, Domain} = domain(Connect, Name),
    rp(vert:virDomainSetAutostart(Domain, Autostart));

call(["capabilities" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    rp(vert:virConnectGetCapabilities(Connect));

call(["console", Name | Arg]) ->
    Opt = getopt(Arg),
    URI = proplists:get_value("uri", Opt, "qemu:///session"),

    io:setopts(standard_io, [binary]),

    {ok, FD} = serctl:open({fd, 0}),
    ok = serctl:tcsetattr(FD, tcsanow, serctl:mode(raw)),

    {ok, Ref} = vert_console:open(Name, [{uri, URI}]),
    spawn_link(fun() -> console_output(Ref) end),
    console_input(Ref);

call(["create", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),

    {ok, Domain} = case file:read_file(Name) of
        {ok, XML} ->
            vert:virDomainDefineXML(Connect, XML);
        {error, enoent} ->
            domain(Connect, Name)
    end,

    rp(vert:virDomainCreate(Domain));

call(["ctl-alt-del", Name | Arg]) ->
    call(["send-key", Name, "29 56 111" | Arg]);

call(["define", File | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    Res = case file:read_file(File) of
        {ok, XML} ->
            vert:virDomainDefineXML(Connect, XML);
        Error ->
            Error
    end,
    rp(Res);

call(["destroy", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Domain} = domain(Connect, Name),
    rp(vert:virDomainDestroy(Domain));

call(["dumpxml", Name | Arg]) ->
    Opt = getopt(Arg),
    Flags = proplists:get_value("flags", Opt, 0),
    {ok, Connect} = connect(Opt),
    {ok, Domain} = domain(Connect, Name),
    rp(vert:virDomainGetXMLDesc(Domain, Flags));

call(["freecell" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    rp(vert:virNodeGetFreeMemory(Connect));

call(["hostname" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    rp(vert:virConnectGetHostname(Connect));

call(["list", "--all" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Shutoff} = vert:virConnectListDefinedDomains(Connect),
    {ok, Running} = domains(Connect, running),
    rp({ok, [{running, Running}, {shutoff, Shutoff}]});

call(["list" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    Res = domains(Connect, running),
    rp(Res);

call(["read", Name, Timeout0]) ->
    Timeout = case Timeout0 of
        "infinity" -> infinity;
        _ -> list_to_integer(Timeout0)
    end,
    {ok, Ref} = vert_console:open(Name),
    Res = vert_console:read(Ref, Timeout),
    vert_console:close(Ref),
    rp(Res);

call(["read", Name]) ->
    call(["read", Name, "infinity"]);

call(["recv", Name, Timeout0]) ->
    Timeout = list_to_integer(Timeout0),
    {ok, Ref} = vert_console:open(Name),
    Res = vert_console:recv(Ref, Timeout),
    vert_console:close(Ref),
    rp(Res);

call(["screenshot", Name | Arg]) ->
    Opt = getopt(Arg),
    error_logger:info_report([{opt, Opt}]),
    Screen = proplists:get_value("screen", Opt, 0),
    File = proplists:get_value("file", Opt,
            Name ++ "_" ++ os:getpid() ++ ".screen"),
    {ok, Connect} = connect(Opt),
    {ok, Domain} = domain(Connect, Name),
    % XXX Put the stream in blocking mode. Seems to be the only way to
    % XXX read from a stream.
    {ok, Stream} = vert:virStreamNew(Connect, 0),
    {ok, Mime} = vert:virDomainScreenshot(Domain, Stream, Screen),
    read_stream(Stream, File),
    rp({ok, Mime});

call(["send", Name | Commands]) ->
    {ok, Ref} = vert_console:open(Name, [{recv_timeout, 0}]),
    lists:foreach(fun(C) ->
            error_logger:info_report([{cmd, Name, C}]),
            ok = vert_console:send(Ref, C)
        end,
        Commands),
    rp(vert_console:close(Ref));

call(["send-key", Name, Keycode | Arg]) ->
    Opt = getopt(Arg),
    Codeset0 = proplists:get_value("codeset", Opt, "linux"),
    Holdtime = list_to_integer(proplists:get_value("holdtime", Opt, "0")),

    Codeset = try list_to_integer(Codeset0)
              catch
                _:_ -> list_to_atom(Codeset0)
              end,

    {ok, Connect} = connect(Opt),
    {ok, Domain} = domain(Connect, Name),

    rp(vert:virDomainSendKey(
                Domain,
                Codeset,
                Holdtime,
                [ list_to_integer(N) ||
                    N <- string:tokens(Keycode, " ") ]
                ));

call(["shutdown", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Domain} = domain(Connect, Name),
    rp(vert:virDomainShutdown(Domain));

call(["undefine", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Domain} = domain(Connect, Name),
    rp(vert:virDomainUndefine(Domain));

call(["uri" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    rp(vert:virConnectGetURI(Connect));

call(["net-autostart", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Network} = network(Connect, Name),

    Autostart = case proplists:get_value("disable", Opt) of
        undefined -> 1;
        _ -> 0
    end,

    rp(vert:virNetworkSetAutostart(Network, Autostart));

call(["net-create", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),

    {ok, Network} = case file:read_file(Name) of
        {ok, XML} ->
            vert:virNetworkDefineXML(Connect, XML);
        {error, enoent} ->
            domain(Connect, Name)
    end,

    rp(vert:virNetworkCreate(Network));

call(["net-define", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    Res = case file:read_file(Name) of
        {ok, XML} ->
            vert:virNetworkDefineXML(Connect, XML);
        Error ->
            Error
    end,
    rp(Res);

call(["net-destroy", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Network} = network(Connect, Name),
    rp(vert:virNetworkDestroy(Network));

call(["net-dumpxml", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Network} = network(Connect, Name),
    rp(vert:virNetworkGetXMLDesc(Network));

call(["net-info", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Network} = network(Connect, Name),

    {ok, UUID} = vert:virNetworkGetUUIDString(Network),
    {ok, Persistent} = vert:virNetworkIsPersistent(Network),
    Autostart = vert:virNetworkGetAutostart(Network),
    {ok, Bridge} = vert:virNetworkGetBridgeName(Network),

    rp({ok, [
        {uuid, UUID},
        {persistent, bool(Persistent)},
        {autostart, Autostart},
        {bridgename, Bridge}
        ]});

call(["net-list" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    rp(vert:virConnectListNetworks(Connect));

call(["net-name", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Network} = network(Connect, Name),
    rp(vert:virNetworkGetName(Network));

call(["net-undefine", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Network} = nwfilter(Connect, Name),
    rp(vert:virNetworkUndefine(Network));

call(["net-uuid", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Network} = network(Connect, Name),
    rp(vert:virNetworkGetUUIDString(Network));

call(["nwfilter-define", File | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    Res = case file:read_file(File) of
        {ok, XML} ->
            vert:virNWFilterDefineXML(Connect, XML);
        Error ->
            Error
    end,
    rp(Res);

call(["nwfilter-dumpxml", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Filter} = nwfilter(Connect, Name),
    rp(vert:virNWFilterGetXMLDesc(Filter));

call(["nwfilter-list" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    rp(vert:virConnectListNWFilters(Connect));

call(["nwfilter-undefine", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Filter} = nwfilter(Connect, Name),
    rp(vert:virNWFilterUndefine(Filter));

call(["find-storage-pool-sources", Type, File | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    Res = case file:read_file(File) of
        {ok, Spec} ->
            vert:virConnectFindStoragePoolSources(Connect, Type, Spec);
        Error ->
            Error
    end,
    rp(Res);

call(["pool-autostart", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),

    Autostart = case proplists:get_value("disable", Opt) of
        undefined -> 1;
        _ -> 0
    end,

    rp(vert:virStoragePoolSetAutostart(Pool, Autostart));

call(["pool-build", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolBuild(Pool));

call(["pool-create", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = case file:read_file(Name) of
        {ok, XML} ->
            vert:virStoragePoolDefineXML(Connect, XML);
        {error, enoent} ->
            storagepool(Connect, Name)
    end,
    rp(vert:virStoragePoolCreate(Pool));

call(["pool-define", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    Res = case file:read_file(Name) of
        {ok, XML} ->
            vert:virStoragePoolDefineXML(Connect, XML);
        Error ->
            Error
    end,
    rp(Res);

call(["pool-delete", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolDelete(Pool));

call(["pool-destroy", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolDestroy(Pool));

call(["pool-dumpxml", Name | Arg]) ->
    Opt = getopt(Arg),
    Flags = proplists:get_value("flags", Opt, 0),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolGetXMLDesc(Pool, Flags));

call(["pool-info", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolGetInfo(Pool));

call(["pool-list" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pools} = vert:virConnectListStoragePools(Connect),
    rp({ok, [ begin
        {ok, Pool} = storagepool(Connect, Name),
        {ok, Active} = vert:virStoragePoolIsActive(Pool),
        Autostart = vert:virStoragePoolGetAutostart(Pool),
        {Name, [{state, bool(Active)}, {autostart, Autostart}]}
      end || Name <- Pools ]});

call(["pool-name", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolGetName(Pool));

call(["pool-refresh", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolRefresh(Pool));

call(["pool-undefine", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolUndefine(Pool));

call(["pool-uuid", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    rp(vert:virStoragePoolGetUUIDString(Pool));

call(["vol-create-from", PName, File, VName | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, PName),
    {ok, XML} = file:read_file(File),
    {ok, Vol} = storagevol(Connect, VName),
    rp(vert:virStorageVolCreateXMLFrom(Pool, XML, Vol));

call(["vol-create", Name, File | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    {ok, XML} = file:read_file(File),
    rp(vert:virStorageVolCreateXML(Pool, XML));

call(["vol-delete", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    rp(vert:virStorageVolDelete(Vol));

call(["vol-download", Name, File | Arg]) ->
    Opt = getopt(Arg),
    Offset = list_to_integer(proplists:get_value("offset", Opt, "0")),
    Length = list_to_integer(proplists:get_value("length", Opt, "0")),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    {ok, Stream} = vert:virStreamNew(Connect, 0),
    ok = vert:virStorageVolDownload(Vol, Stream, Offset, Length),
    read_stream(Stream, File),
    rp(ok);

call(["vol-dumpxml", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    rp(vert:virStorageVolGetXMLDesc(Vol));

call(["vol-info", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    rp(vert:virStorageVolGetInfo(Vol));

call(["vol-key", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    rp(vert:virStorageVolGetKey(Vol));

call(["vol-list", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Pool} = storagepool(Connect, Name),
    {ok, Pools} = vert:virStoragePoolListVolumes(Pool),

    rp({ok, [ begin
        {ok, Vol} = vert:virStorageVolLookupByName(Pool, N),
        {ok, Path} = vert:virStorageVolGetPath(Vol),
        {ok, Key} = vert:virStorageVolGetKey(Vol),
        {N, [{path, Path}, {key, Key}]}
      end || N <- Pools ]});

call(["vol-name", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    rp(vert:virStorageVolGetName(Vol));

call(["vol-path", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    rp(vert:virStorageVolGetPath(Vol));

call(["vol-pool", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    {ok, Pool} = vert:virStoragePoolLookupByVolume(Vol),
    rp(vert:virStoragePoolGetName(Pool));

call(["vol-upload", Name, File | Arg]) ->
    Opt = getopt(Arg),
    Offset = list_to_integer(proplists:get_value("offset", Opt, "0")),
    Length = case proplists:get_value("length", Opt) of
        undefined ->
            {ok, #file_info{size = Size}} = file:read_file_info(File),
            Size;
        N ->
            list_to_integer(N)
    end,
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    {ok, Stream} = vert:virStreamNew(Connect),
    ok = vert:virStorageVolUpload(Vol, Stream, Offset, Length),
    send_stream(Stream, File),
    rp(ok);

call(["vol-wipe", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Vol} = storagevol(Connect, Name),
    rp(vert:virStorageVolWipe(Vol));

call(["secret-define", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    Res = case file:read_file(Name) of
        {ok, XML} ->
            vert:virSecretDefineXML(Connect, XML);
        Error ->
            Error
    end,
    rp(Res);

call(["secret-dumpxml", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Secret} = secret(Connect, Name),
    rp(vert:virSecretGetXMLDesc(Secret));

call(["secret-get-value", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Secret} = secret(Connect, Name),
    {ok, Bin} = vert:virSecretGetValue(Secret),
    {ok, base64:encode_to_string(Bin)};

call(["secret-list" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Secrets} = vert:virConnectListSecrets(Connect),
    rp({ok, [ begin
        {ok, Secret} = secret(Connect, UUID),
        {ok, Type} = vert:virSecretGetUsageType(Secret),
        {UUID, [{usagetype, Type}]}
      end || UUID <- Secrets ]});

call(["secret-set-value", Name, Val | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Secret} = secret(Connect, Name),
    rp(vert:virSecretSetValue(Secret, base64:decode(Val)));

call(["secret-undefine", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Connect} = connect(Opt),
    {ok, Secret} = secret(Connect, Name),
    rp(vert:virSecretUndefine(Secret));

call(_) ->
    Help = [
        "autostart",
        "capabilties",
        "ctl-alt-del",
        "console",
        "create",
        "define",
        "destroy",
        "dumpxml",
        "freecell",
        "hostname",
        "list",
        "list --all",
        "read",
        "recv",
        "send",
        "shutdown",
        "undefine",
        "uri",

        "net-autostart",
        "net-create",
        "net-define",
        "net-destroy ",
        "net-dumpxml",
        "net-info",
        "net-list",
        "net-name",
        "net-start",
        "net-undefine",
        "net-uuid",

        "nwfilter-define",
        "nwfilter-dumpxml",
        "nwfilter-list",
        "nwfilter-undefine"

        "find-storage-pool-sources",
        "pool-autostart",
        "pool-build",
        "pool-create",
        "pool-define",
        "pool-delete",
        "pool-destroy",
        "pool-dumpxml",
        "pool-info",
        "pool-list",
        "pool-name",
        "pool-refresh",
        "pool-undefine",
        "pool-uuid",

        "secret-define",
        "secret-dumpxml",
        "secret-get-value",
        "secret-list",
        "secret-set-value",
        "secret-undefine",

        "vol-create",
        "vol-create-from",
        "vol-delete",
        "vol-download",
        "vol-dumpxml",
        "vol-info",
        "vol-key",
        "vol-list",
        "vol-name",
        "vol-path",
        "vol-pool",
        "vol-upload",
        "vol-wipe"

    ],
    rp(Help),
    halt(1).


%%-------------------------------------------------------------------------
%%% Internal functions
%%-------------------------------------------------------------------------
rp(Term) ->
    io:format("~p~n", [Term]).

getopt(Opts) ->
    getopt(Opts, []).
getopt([], Acc) ->
    lists:reverse(Acc);
getopt(["--" ++ Key, "--" ++ _ = Val | Rest], Acc) ->
    getopt([Val|Rest], [{Key, true}|Acc]);
getopt(["--" ++ Key], Acc) ->
    getopt([], [{Key, true}|Acc]);
getopt(["--" ++ Key, Val | Rest], Acc) ->
    getopt(Rest, [{Key, Val}|Acc]).

bool(true) -> 1;
bool(false) -> 0;
bool(1) -> true;
bool(0) -> false.

connect(Opt) ->
    URI = proplists:get_value("uri", Opt, "qemu:///system"),
    vert:virConnectOpen(URI).

domain(Connect, Name) ->
    Fun = [ fun() -> vert:virDomainLookupByID(Connect, list_to_integer(Name)) end,
            fun() -> vert:virDomainLookupByUUIDString(Connect, Name) end,
            fun() -> vert:virDomainLookupByName(Connect, Name) end ],
    lookup(Fun).

network(Connect, Name) ->
    Fun = [ fun() -> vert:virNetworkLookupByUUIDString(Connect, Name) end,
            fun() -> vert:virNetworkLookupByName(Connect, Name) end ],
    lookup(Fun).

nwfilter(Connect, Name) ->
    Fun = [ fun() -> vert:virNWFilterLookupByUUIDString(Connect, Name) end,
            fun() -> vert:virNWFilterLookupByName(Connect, Name) end ],
    lookup(Fun).

secret(Connect, Name) ->
    Fun = [ fun() -> vert:virSecretLookupByUUIDString(Connect, Name) end ],
    lookup(Fun).

storagepool(Connect, Name) ->
    Fun = [ fun() -> vert:virStoragePoolLookupByUUIDString(Connect, Name) end,
            fun() -> vert:virStoragePoolLookupByName(Connect, Name) end ],
    lookup(Fun).

storagevol(Connect, Name) ->
    Fun = [ fun() -> vert:virStorageVolLookupByKey(Connect, Name) end,
            fun() -> vert:virStorageVolLookupByPath(Connect, Name) end ],
    lookup(Fun).

lookup(Fun)  ->
    lookup(Fun, []).
lookup([], [{error, Error}|_]) ->
    {error, Error};
lookup([Fun|Tail], Acc) ->
    try Fun() of
        {ok, Domain} ->
            {ok, Domain};
        {error, Error} ->
            lookup(Tail, [{error, Error}|Acc])
    catch
        _:_ ->
            lookup(Tail, Acc)
    end.

console_output(Ref) ->
    {ok, Buf} = vert_console:read(Ref),
    io:fwrite(Buf),
    console_output(Ref).

console_input(Ref) ->
    Buf = io:get_chars("", 1),
%    error_logger:info_report([{in, Buf}]),
    ok = vert_console:write(Ref, Buf),
    console_input(Ref).

domains(Connect, running) ->
    case vert:virConnectListDomains(Connect) of
        {ok, Domains} -> {ok, id_to_name(Connect, Domains)};
        Error -> Error
    end.

id_to_name(Connect, Ids) when is_list(Ids) ->
    [ begin
        {ok, Domain} = vert:virDomainLookupByID(Connect, Id),
        {ok, Name} = vert:virDomainGetName(Domain),
        Name
      end || Id <- Ids ].

read_stream(Stream, File) ->
    {ok, FH} = file:open(File, [write, raw, binary]),
    read_stream(Stream, File, FH).
read_stream(Stream, File, FH) ->
    case vert:virStreamRecv(Stream, 16#FFFF) of
        {error, eagain} ->
            timer:sleep(100),
            read_stream(Stream, File, FH);
        {ok, <<>>} ->
            vert:virStreamFinish(Stream),
            file:close(FH);
        {ok, Bytes} ->
            error_logger:info_report([{got, File, byte_size(Bytes)}]),
            ok = file:write(FH, Bytes),
            read_stream(Stream, File, FH)
        end.

send_stream(Stream, File) ->
    {ok, FH} = file:open(File, [read, raw, binary]),
    send_stream(Stream, File, FH).
send_stream(Stream, File, FH) ->
    case file:read(FH, 16#FFFF) of
        eof ->
            vert:virStreamFinish(Stream),
            file:close(FH);
        {ok, Bytes} ->
            error_logger:info_report([{sending, File, byte_size(Bytes)}]),
            ok = vert:virStreamSend(Stream, Bytes)
    end.
